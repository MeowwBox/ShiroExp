package cn.safe6.util;


import net.bytebuddy.ByteBuddy;

import java.util.Base64;

public class GetByteCode {

    public static void main(String[] args) throws Exception {
        decodeData();
    }

    public static void decodeData() throws ClassNotFoundException {

        String data = "";
        Class<? extends Class> aClass = ClassLoader.getSystemClassLoader().loadClass(Base64.getDecoder().decode(data).toString()).getClass();
        System.out.println(aClass);

    }

    public static void encodeData(){
        byte[] code= new ByteBuddy()
                .redefine(cn.safe6.payload.TomcatEcho.class)
                .name("cn.safe6.payload.TomcatEcho")
                .make()
                .getBytes();
        System.out.println(Base64.getEncoder().encodeToString(code));
    }



}
